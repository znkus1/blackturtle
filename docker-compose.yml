services:
  db:
    image: postgres:17
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_DB=${POSTGRES_DB}

  # prestart:
  #   build:
  #     context: ./backend
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #       restart: true
  #   command: bash scripts/prestart.sh
  #   env_file:              # ← 추가!
  #     - .env
  #   environment:
  #     - POSTGRES_SERVER=db
  #     - POSTGRES_PORT=${POSTGRES_PORT}
  #     - POSTGRES_DB=${POSTGRES_DB}
  #     - POSTGRES_USER=${POSTGRES_USER}
  #     - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
  #     - SECRET_KEY=${SECRET_KEY}
  #     - FIRST_SUPERUSER=${FIRST_SUPERUSER}
  #     - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}

  backend:
    build:
      context: ./backend
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
      # prestart:
      #   condition: service_completed_successfully
    env_file:              # ← 추가!
      - .env
    environment:
      - DOMAIN=${DOMAIN}
      - ENVIRONMENT=${ENVIRONMENT}
      - FRONTEND_HOST=${FRONTEND_HOST}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - SECRET_KEY=${SECRET_KEY}
      - FIRST_SUPERUSER=${FIRST_SUPERUSER}
      - FIRST_SUPERUSER_PASSWORD=${FIRST_SUPERUSER_PASSWORD}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  app-db-data: